use strict;
use warnings;
use Irssi::Instance;
use Devel::DDCWarn;

sub irssi {
  Irssi::Instance->new(socket_path => '/home/matthewt/tmp/ag')
                 ->start
}

sub say { STDOUT->say(@_) }

sub debug { ::Dwarn($_[0]) }

sub get_argv { \@ARGV }

use xcl::script;

# Usage as shell command:
#   $ me loosechans          # find channels kicking around uncategorised
#   $ me numof '#foo'        # window number currently containing #foo
#   $ me listcat 3           # show all channels in 3xx windows
#   $ me firstfree 3         # print first unused window number in 3xx
#   $ me catassign '#foo' 3  # move channel #foo to first free 3xx window

let loosechans = (conn, args) => {
  conn.list_servers().each {
    let tag = $.'tag';
    let server = this;
    $.list_channels() | .'name' | .where {
      server.window_find_item(this).'refnum'.to_int() > 600
    } | { ++ tag ' ' this } | say;
  }
}

let catwins = (conn, catp) => {
  let cat = catp.to_int();
  let base = cat * 100;
  let top = base + 99;
  Int.range(base, top) | conn.window_find_refnum;
}

let listcat = (conn, args) => {
  catwins(conn, args.0) | { exists $.'active'.'name' } | say;
}

let firstfree_of = (conn, cat) => {
  [catwins(conn, cat).where not exists .'active'].0.'refnum';
}

let firstfree = (conn, args) => {
  say firstfree_of(conn, args.0);
}

let numof = (conn, args) => {
  say conn.window_find_item(args.0).'refnum';
}

let catassign = (conn, args) => {
  let win = conn.window_find_item(args.0);
  let destnum = firstfree_of(conn, args.1);
  say ++('Moving ', win.'refnum', ' to ', destnum);
  win.set_refnum(destnum);
}

let conn = irssi();

let argv = get_argv();

Scope.current().call argv.head().to_name() conn argv.tail();
